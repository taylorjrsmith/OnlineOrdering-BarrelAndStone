@inject Data.OrderService orderService
@inject ISettingService settingService

<div class="dialog-title">
    <h2>@Pizza.Special.Name</h2>
    @Pizza.Special.Description
</div>
<form class="dialog-body">
    @if (!Pizza.IsSide)
    {
        <div class="container">
            <div class="row" style="
    margin-left: 10%;
">
                <h6 style="width:100%;">Choose Your Size</h6>
                @if (settingService.GetSetting<bool>("EightInchInStock", true).Result)
                {
                   <div class="col-6 @(Pizza.Size == 8 ? "size-box__active" : "") dialog-option" @onclick="() => setPizzaSize(8)">
                        8" Pizza
                    </div>
                }
                @if (settingService.GetSetting<bool>("TwelveInchInStock", true).Result)
                {
                <div class="col-6 @(Pizza.Size == 12 ? "size-box__active" : "") dialog-option dialog-option__two" @onclick="() => setPizzaSize(12)">
                    12" Pizza
                </div>
                }
                @if(settingService.GetSetting<bool>("GlutenFreeInStock").Result && Pizza.Size == 12)
                {
                    <h6 class="mt-3">Do you want your pizza to be gluten free?</h6>
                    <small>Please note gluten free pizzas will add £1.00 to the bill</small>
                    <div class="col-6 @(Pizza.GlutenFree ? "size-box__active" : "") dialog-option" @onclick="() => setGlutenFree(true)">
                        Yes
                    </div>
                    <div class="col-6 @(!Pizza.GlutenFree ? "size-box__active" : "") dialog-option dialog-option__two" @onclick="() => setGlutenFree(false)">
                        No
                    </div>
    }
    @if(Pizza.Special.CanBeVegan)
    {
                    <h6 class="mt-3">Do you want vegan cheese?</h6>
                    <small>You can also request your cheese to be vegan.We use Violife vegan cheese</small>
                    <div class="col-6 @(Pizza.Vegan ? "size-box__active" : "") dialog-option" @onclick="() => setVegan(true)">
                        Yes
                    </div>
                    <div class="col-6 @(!Pizza.Vegan ? "size-box__active" : "") dialog-option dialog-option__two" @onclick="() => setVegan(false)">
                        No
                    </div>
}
            </div>
        </div>

            @*<div>
        <label>Size:</label>
        <input type="range" min="@Pizza.MinimumSize" max="@Pizza.MaximumSize" step="1" @bind="Pizza.Size" @bind:event="oninput" />
        <span class="size-label">
            @(Pizza.Size)" (£@(Pizza.GetFormattedTotalPrice()))
        </span>
    </div>*@
                <div>
                    <label>Extra Toppings:</label>
                    @if (toppings == null)
{
                        <select class="custom-select" disabled>
                            <option>(loading...)</option>
                        </select>
}
else if (Pizza.Toppings.Count >= 6)
{
                        <div>(maximum reached)</div>
}
else
{
                        <select class="custom-select" @onchange="ToppingSelected">
                            <option value="-1" disabled selected>(select)</option>
                            @for (var i = 0; i < toppings.Count; i++)
                            {
                                <option value="@i">@toppings[i].Name - (£@(toppings[i].GetFormattedPrice(Pizza.Size)))</option>
                            }
                        </select>
}
                </div>

                <div class="toppings">
                    @foreach (var topping in Pizza.Toppings)
{
                        <div class="topping">
                            @topping.Topping.Name
                            <span class="topping-price">@topping.Topping.GetFormattedPrice(Pizza.Size)</span>
                            <button type="button" class="delete-topping" @onclick="@(() => RemoveTopping(topping.Topping))">x</button>
                        </div>
}
                </div>
                }
                else
                {
                <div class="container">
                    Would you like to order @Pizza.Special.Name?
                </div>
                }
</form>

<div class="dialog-buttons">
    <button class="btn btn-secondary mr-auto" @onclick="OnCancel">Cancel</button>
    <span class="mr-center">
        Price: <span class="price">@(Pizza.GetFormattedTotalPrice())</span>
    </span>
    <button class="btn btn-success ml-auto" @onclick="OnConfirm">Order ></button>
</div>

@code {
    List<Topping> toppings;

    [Parameter] public Pizza Pizza { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }
    [Parameter] public EventCallback OnConfirm { get; set; }

    protected async override Task OnInitializedAsync()
    {
        toppings = await orderService.GetToppings();
    }

    void ToppingSelected(ChangeEventArgs e)
    {
        if (int.TryParse((string)e.Value, out var index) && index >= 0)
        {
            AddTopping(toppings[index]);
        }
    }

    void AddTopping(Topping topping)
    {
        if (Pizza.Toppings.Find(pt => pt.Topping == topping) == null)
        {
            Pizza.Toppings.Add(new PizzaTopping() { Topping = topping });
        }
    }

    void RemoveTopping(Topping topping)
    {
        Pizza.Toppings.RemoveAll(pt => pt.Topping == topping);
    }
    void setPizzaSize(int size)
    {
        Pizza.Size = size;
    }
    void setGlutenFree(bool isGlutenFree)
    {
        Pizza.GlutenFree = isGlutenFree;
    }

    void setVegan(bool isVegan)
    {
        Pizza.Vegan = isVegan;
    }
}
