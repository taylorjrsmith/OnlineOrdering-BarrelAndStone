@page "/drink/{menuItem:int}"
@inject BlazorApp1.Data.ManagementService ManagementService
@inject NavigationManager NavManager
@inject Microsoft.Extensions.Hosting.IHostingEnvironment env
@if (Drink != null)
{
    <div class="container">
        <div class="card mt-3">
            <div class="card-header">
                <h1>@Drink.DrinkName</h1>
            </div>
            <div class="card-body">
                <div class="form-group row">
                    <label class="col-2">Name:</label>
                    <div class="col-8">
                        <input class="form-control" @bind-value="Drink.DrinkName" />
                    </div>
                </div>
                <div class="form-group row">
                    <label class="col-2">Reporting Category:</label>
                    <div class="col-8">
                        <input class="form-control" @bind-value="Drink.ReportingCategory" />
                    </div>
                </div>

                <div class="form-group row">
                    <label class="col-2">Base Price:</label>
                    <div class="col-4">
                        <div class="input-group mb-3">
                            <div class="input-group-prepend">
                                <span class="input-group-text">£</span>
                            </div>
                            <input type="number" step="0.01" class="form-control" @bind-value="Drink.Price" placeholder="9.99">
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-6">
                        <InputFile OnChange="HandleFileSelected" />
                    </div>
                    <div class="col-6">
                        <ul class="pizza-cards">
                            <li class="lazyload" style="background:url(@Drink.ImageUrl)">
                                <div class="pizza-info">
                                    <span class="title">@Drink.DrinkName</span>
                                    <span class="price">@Drink.GetFormattedPrice</span>
                                </div>

                            </li>
                        </ul>
                    </div>
                </div>
                @if (file != null)
                {
                    <p>Name: @file.Name</p>
                    <p>Size in bytes: @file.Size</p>
                    <p>Last modified date: @file.LastModified.ToShortDateString()</p>
                    <p>Content type (not always supplied by the browser): @file.Type</p>
                }

            </div>
            <div class="card-footer">
                <button class="btn btn-primary" @onclick="() => UpdateModel()">Save</button>
            </div>
        </div>
    </div>
}
@if (!IsAuthorised)
{
    <Authorise OnAuthorisedCallback="async () => await Populate()"></Authorise>
}

@code {
    [Parameter]
    public int menuItem { get; set; }
    Drink Drink { get; set; }
    IFileListEntry file;
    string Url { get; set; }
    public bool IsAuthorised { get; set; }



    protected async Task Populate()
    {

        IsAuthorised = true;
        if (menuItem == 0)
        {
            Drink = new Drink();
        }
        else
        {
            Drink = await ManagementService.GetDrink(menuItem);
        }
        Url = Drink.ImageUrl;
    }

    async Task HandleFileSelected(IFileListEntry[] files)
    {
        file = files.FirstOrDefault();
        if (file != null)
        {
            // Load as an image file in memory
            var format = "image/jpeg";
            var imageFile = await file.ToImageFileAsync(format, 640, 480);
            var url = $"/img/barrel-and-stone/{file.Name}";
            using (var fileStream = System.IO.File.Create($"{env.ContentRootPath}\\wwwroot{url.Replace("/", "\\")}"))
            {
                await imageFile.Data.CopyToAsync(fileStream);
            }
            Url = Drink.ImageUrl = url;
            await UpdateModel(false);
            this.StateHasChanged();
        }
    }

    async Task UpdateModel(bool shouldRedirect = true)
    {
        await ManagementService.UpdateDrink(Drink);
        if (shouldRedirect)
            NavManager.NavigateTo("/kitchen/manage");
    }
}
